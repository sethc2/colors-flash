{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["emptyGrid","Array","fill","colorPalette","App","useState","map","x","i","grid","setGrid","paletteText","setPaletteText","ourColorPalette","setColorPalette","collapsed","setCollapsed","gridRef","useRef","current","timerRef","className","a","b","j","onClick","z","r","set","length","style","background","padding","visibility","window","setInterval","clearInterval","onChange","e","currentTarget","value","type","palette","split","slice","error","parsePalette","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAIMA,EAAY,IAAIC,MAAM,GAAGC,KAAK,IAAID,MAAM,GAAGC,KAAK,IAEhDC,EAAe,CAAC,MAAO,SAAU,QAAS,OAAQ,UAiHzCC,MAzGf,WAAgB,IAAD,EACWC,oBAAS,iBANlB,YAMkC,WALxC,YAAIL,EAAUM,KAAI,SAACC,EAAGC,GAAJ,mBAAcD,EAAED,KAAI,kBAAME,UAC9C,YAAIR,EAAUM,KAAI,SAACC,EAAGC,GAAJ,mBAAcD,EAAED,KAAI,kBAAM,aAGtC,mBACNG,EADM,KACAC,EADA,OAGyBL,mBAAS,IAHlC,mBAGNM,EAHM,KAGOC,EAHP,OAK8BP,mBAASF,GALvC,mBAKNU,EALM,KAKWC,EALX,OAOqBT,oBAAS,GAP9B,mBAONU,EAPM,KAOKC,EAPL,KAyBPC,EAAUC,iBAAOT,GACvBQ,EAAQE,QAAUV,EAElB,IAAMW,EAAWF,iBAAsB,MAIvC,OACE,sBAAKG,UAAU,MAAf,UACGZ,EAAKH,KAAI,SAACgB,EAAGd,GAAJ,OACR,8BACGc,EAAEhB,KAAI,SAACiB,EAAQC,GAAT,OACL,qBACEH,UAAWD,EAASD,QAAU,UAAY,cAC1CM,QAAS,kBA9BRC,EA8BkBlB,EA9BPmB,EA8BUH,EA9BCI,GA8BGL,EAAI,GAAKV,EAAgBgB,YA7B7DnB,EAAQ,YACHD,EAAKH,KAAI,SAACC,EAAGC,GAAJ,mBACPD,EAAED,KAAI,SAACgB,EAAGE,GAAJ,OAAWhB,IAAMkB,GAAKC,IAAMH,EAAII,EAAMN,WAHzC,IAACI,EAAWC,EAAWC,GA+BvBE,MAAO,CACLC,WAAYlB,EAAgBU,EAAIV,EAAgBgB,mBAM1D,8BACE,wBACEC,MAAO,CAAEE,QAAS,IAClBP,QAAS,kBAAMT,GAAcD,IAF/B,mBAOF,sBACEM,UAAU,UACVS,MAAO,CAAEG,WAAYlB,EAAY,WAAa,WAFhD,UAIwB,OAArBK,EAASD,SACR,wBACEM,QAAS,WACPL,EAASD,QAAUe,OAAOC,aAAY,WACpCzB,EAAQ,YACHO,EAAQE,QAAQb,KAAI,SAACC,EAAGC,GAAJ,mBAAcD,EAAED,KAAI,SAACgB,EAAGE,GAAJ,OAAUF,EAAI,aAlClD,MA8Bf,mBAYoB,OAArBF,EAASD,SACR,wBACEM,QAAS,WACPW,cAAchB,EAASD,SAAW,GAClCC,EAASD,QAAU,MAHvB,kBASDN,EAAgBP,KAAI,SAACE,EAAGD,GAAJ,OACnB,uBACE8B,SAAU,SAACC,GACTxB,EACED,EAAgBP,KAAI,SAACqB,EAAGH,GAAJ,OAClBA,IAAMjB,EAAN,UAAa+B,EAAEC,cAAcC,OAAUb,OAI7Ca,MAAOhC,EACPiC,KAAK,aAGT,0BACED,MAAO7B,EACP0B,SAAU,SAACC,GAAD,OAAO1B,EAAe0B,EAAEC,cAAcC,UAElD,wBAAQf,QAAS,kBAlFF,SAACiB,GACpB,IACE5B,EACE4B,EAAQC,MAAM,MAAMrC,KAAI,SAACC,GAAD,MAAO,IAAMA,EAAEoC,MAAM,KAAK,GAAGC,MAAM,EAAG,OAEhE,MAAOC,KA6EkBC,CAAanC,IAApC,0BCnGOoC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5e7e0e60.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nconst emptyGrid = new Array(5).fill(new Array(5).fill(0));\n\nconst colorPalette = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\"];\n\nfunction resetGrid(method: string) {\n  if (method === \"rainbow\")\n    return [...emptyGrid.map((x, i) => [...x.map(() => i)])];\n  return [...emptyGrid.map((x, i) => [...x.map(() => 0)])];\n}\n\nfunction App() {\n  const [grid, setGrid] = useState(() => resetGrid(\"all same\"));\n\n  const [paletteText, setPaletteText] = useState(\"\");\n\n  const [ourColorPalette, setColorPalette] = useState(colorPalette);\n\n  const [collapsed, setCollapsed] = useState(false);\n\n  const set = (z: number, r: number, set: number) => {\n    setGrid([\n      ...grid.map((x, i) => [\n        ...x.map((a, j) => (i === z && r === j ? set : a)),\n      ]),\n    ]);\n  };\n\n  const parsePalette = (palette: string) => {\n    try {\n      setColorPalette(\n        palette.split(\"\\n\").map((x) => \"#\" + x.split(\"#\")[1].slice(0, 6))\n      );\n    } catch (error) {}\n  };\n\n  const gridRef = useRef(grid);\n  gridRef.current = grid;\n\n  const timerRef = useRef<number | null>(null);\n\n  const transitionWait = 500;\n\n  return (\n    <div className=\"App\">\n      {grid.map((a, i: any) => (\n        <div>\n          {a.map((b: any, j: any) => (\n            <div\n              className={timerRef.current ? \"running\" : \"not-running\"}\n              onClick={() => set(i, j, (b + 1) % ourColorPalette.length)}\n              style={{\n                background: ourColorPalette[b % ourColorPalette.length],\n              }}\n            ></div>\n          ))}\n        </div>\n      ))}\n      <div>\n        <button\n          style={{ padding: 10 }}\n          onClick={() => setCollapsed(!collapsed)}\n        >\n          |||\n        </button>\n      </div>\n      <div\n        className=\"options\"\n        style={{ visibility: collapsed ? \"collapse\" : \"visible\" }}\n      >\n        {timerRef.current === null && (\n          <button\n            onClick={() => {\n              timerRef.current = window.setInterval(() => {\n                setGrid([\n                  ...gridRef.current.map((x, i) => [...x.map((a, j) => a + 1)]),\n                ]);\n              }, transitionWait);\n            }}\n          >\n            START\n          </button>\n        )}\n        {timerRef.current !== null && (\n          <button\n            onClick={() => {\n              clearInterval(timerRef.current || 0);\n              timerRef.current = null;\n            }}\n          >\n            STOP\n          </button>\n        )}\n        {ourColorPalette.map((i, x) => (\n          <input\n            onChange={(e) => {\n              setColorPalette(\n                ourColorPalette.map((r, j) =>\n                  j === x ? `${e.currentTarget.value}` : r\n                )\n              );\n            }}\n            value={i}\n            type=\"color\"\n          ></input>\n        ))}\n        <textarea\n          value={paletteText}\n          onChange={(e) => setPaletteText(e.currentTarget.value)}\n        ></textarea>\n        <button onClick={() => parsePalette(paletteText)}>PARSE</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}